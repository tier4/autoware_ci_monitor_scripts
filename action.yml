name: "Code quality visualizer"
author: "Keisuke Shima"
description: "Measure code metrics and generate result page"
branding:
  icon: "activity"
  color: "blue"

inputs:
  artifacts-dir:
    description: "Path to Artifacts generated using this Action (must include lcov-result/ and lizard-result/ directory)"
    required: true
  base-url:
    description: "If you use example/hugo-site in this repository, please specify the baseURL."
    required: true
  title:
    description: "If you use example/hugo-site in this repository, please specify the title."
    required: true
  ros-distro:
    description: "ROS distribution"
    required: true
    default: "foxy"
  hugo-dir:
    description: "If you want to use your own hugo-site, specify the root directory"
    required: true
    default: "${GITHUB_ACTION_PATH}/example/hugo-site"
  output-dir:
    description: "Hugo output directory"
    required: true
    default: "${GITHUB_WORKSPACE}/public"
  lcovrc-path:
    description: "Path to .lcovrc file"
    required: true
    default: "${GITHUB_ACTION_PATH}/.lcovrc"
  CCN:
    description: "Threshold for cyclomatic complexity number warning. The default value is 15."
    required: true
    default: 15
  nloc:
    description: "Threshold for NLOC. The default value is 1000000."
    required: true
    default: 1000000
  arguments:
    description: "Limit for number of parameters. The default value is 100."
    required: true
    default: 100

outputs:
  output-dir:
    description: "Hugo output directory"
    value: ${{ inputs.output-dir }}

runs:
  using: "composite"
  steps:
    - name: Run jobs
      run: |
        echo "--- Preprocess ---"
        echo "GITHUB_ACTION_PATH is ${GITHUB_ACTION_PATH}"
        ls -l ${GITHUB_ACTION_PATH}
        echo "github.action_path is ${{ github.action_path }}"
        echo "GITHUB_WORKSPACE is ${GITHUB_WORKSPACE}"
        ls -l ${GITHUB_WORKSPACE}
        echo "Workspace is ${{ github.workspace }}"
        ARTIFACTS_DIR=$(echo ${{ inputs.artifacts-dir }} | sed -e "s@/\$@@")
        echo "Artifacts directory is $ARTIFACTS_DIR"
        ls -l ${ARTIFACTS_DIR}
        HUGO_DIR=$(echo ${{ inputs.hugo-dir }} | sed -e "s@/\$@@")
        echo "Hugo directory is $HUGO_DIR"
        OUTPUT_DIR=$(echo ${{ inputs.output-dir }} | sed -e "s@/\$@@")
        echo "Output directory is $OUTPUT_DIR"
        echo "--- Install dependencies ---"
        apt-get update
        apt-get install -y lcov git python-is-python3 python3-pip hugo
        pip3 install jinja2 bs4 pandas plotly
        echo "--- Set timestamp ---"
        echo "Creating timestamp to ${GITHUB_WORKSPACE}/timestamp.txt"
        date -u '+%Y%m%d_%H%M%S' > ${GITHUB_WORKSPACE}/timestamp.txt
        echo "--- Measure code coverage ---"
        echo "Artifacts directory is ${ARTIFACTS_DIR}"
        mkdir -p ${ARTIFACTS_DIR}
        echo "Run coverage_all.sh"
        . /opt/ros/${{ inputs.ros-distro }}/setup.sh
        ${GITHUB_ACTION_PATH}/scripts/coverage_all.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${GITHUB_WORKSPACE}/timestamp.txt ${{ inputs.lcovrc-path }} || true
        echo "Run coverage.sh"
        ${GITHUB_ACTION_PATH}/scripts/coverage.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${GITHUB_WORKSPACE}/timestamp.txt ${{ inputs.lcovrc-path }} || true
        echo "--- Measure code metrics for all packages ---"
        ${GITHUB_ACTION_PATH}/scripts/lizard_all.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${{ inputs.CCN }} ${{ inputs.nloc }} ${{ inputs.arguments }} ${GITHUB_WORKSPACE}/timestamp.txt
        echo "--- Measure code metrics ---"
        ${GITHUB_ACTION_PATH}/scripts/lizard.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${{ inputs.CCN }} ${{ inputs.nloc }} ${{ inputs.arguments }} ${GITHUB_WORKSPACE}/timestamp.txt
        echo "--- Scraping ---"
        TIMESTAMP=$(cat ${GITHUB_WORKSPACE}/timestamp.txt)
        mkdir -p ${ARTIFACTS_DIR}/metrics/$TIMESTAMP
        python ${GITHUB_ACTION_PATH}/scripts/scraping.py --lcov_dir=${ARTIFACTS_DIR}/lcov_result/$TIMESTAMP/ --lizard_dir=${ARTIFACTS_DIR}/lizard_result/$TIMESTAMP/ --output_dir=${ARTIFACTS_DIR}/metrics/$TIMESTAMP/
        echo "--- Create static page ---"
        ${GITHUB_ACTION_PATH}/scripts/create_link.sh ${ARTIFACTS_DIR}/lcov_result/$TIMESTAMP ${ARTIFACTS_DIR}/lcov_result/latest
        ${GITHUB_ACTION_PATH}/scripts/create_link.sh ${ARTIFACTS_DIR}/lizard_result/$TIMESTAMP ${ARTIFACTS_DIR}/lizard_result/latest
        ${GITHUB_ACTION_PATH}/scripts/create_link.sh ${ARTIFACTS_DIR}/metrics/$TIMESTAMP ${ARTIFACTS_DIR}/metrics/latest
        echo "Run main.py"
        python ${GITHUB_ACTION_PATH}/scripts/main.py --input-dir=${ARTIFACTS_DIR}/metrics/ --hugo-root-dir=${HUGO_DIR} --hugo-template-dir=${GITHUB_ACTION_PATH}/template/hugo/ --lcov-result-path=${ARTIFACTS_DIR}/lcov_result/latest/ --lizard-result-path=${ARTIFACTS_DIR}/lizard_result/latest/ --base-url=${{ inputs.base-url }} --title=${{ inputs.title }}
        echo "--- Generate pages ---"
        cd ${HUGO_DIR} && hugo -d ${OUTPUT_DIR}
      shell: bash
