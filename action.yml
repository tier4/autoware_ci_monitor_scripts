name: "Code quality visualizer"
author: "Keisuke Shima"
description: "Measure code metrics and generate result page"
branding:
  icon: "activity"
  color: "blue"

inputs:
  artifacts-dir:
    description: "Path to Artifacts generated using this Action (must include lcov-result/ and lizard-result/ directory)"
    required: true
  base-url:
    description: "If you use example/hugo-site in this repository, please specify the baseURL."
    required: true
  title:
    description: "If you use example/hugo-site in this repository, please specify the title."
    required: true
  ros-distro:
    description: "ROS distribution"
    required: true
    default: "foxy"
  hugo-dir:
    description: "If you want to use your own hugo-site, specify the root directory"
    required: true
    default: "${GITHUB_ACTION_PATH}/example/hugo-site"
  output-dir:
    description: "Hugo output directory"
    required: true
    default: "${GITHUB_WORKSPACE}/public"
  lcovrc-path:
    description: "Path to .lcovrc file"
    required: true
    default: "${GITHUB_ACTION_PATH}/.lcovrc"
  CCN:
    description: "Threshold for cyclomatic complexity number warning. The default value is 15."
    required: true
    default: "15"
  nloc:
    description: "Threshold for NLOC. The default value is 1000000."
    required: true
    default: "1000000"
  arguments:
    description: "Limit for number of parameters. The default value is 100."
    required: true
    default: "100"
  exclude:
    description: "Space separated list of exclude paths."
    required: false
  codechecker-config-path:
    description: "Path to codechecker-config.json file"
    required: true
    default: "${GITHUB_ACTION_PATH}/codechecker-config.json"

outputs:
  output-dir:
    description: "Hugo output directory"
    value: ${{ inputs.output-dir }}

runs:
  using: "composite"
  steps:
    - name: Filtering input
      id: filtered
      run: |
        echo ::set-output name=ARTIFACTS_DIR::$(${{ inputs.artifacts-dir }} | sed -e "s@/\$@@")
        echo ::set-output name=HUGO_DIR::$(${{ inputs.hugo-dir }} | sed -e "s@/\$@@")
        echo ::set-output name=OUTPUT_DIR::$(${{ inputs.output-dir }} | sed -e "s@/\$@@")
      shell: bash

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y lcov git python-is-python3 python3-pip hugo
        pip3 install jinja2 bs4 pandas plotly
      shell: bash

    - name: Set timestamp
      run: |
        date -u '+%Y%m%d_%H%M%S' > ${GITHUB_WORKSPACE}/timestamp.txt
      shell: bash

    - name: Measure code coverage
      run: |
        echo "Artifacts directory is ${{ steps.filtered.outputs.ARTIFACTS_DIR }}"
        mkdir -p ${{ steps.filtered.outputs.ARTIFACTS_DIR }}
        . /opt/ros/${{ inputs.ros-distro }}/setup.sh
        ${GITHUB_ACTION_PATH}/scripts/coverage_all.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${GITHUB_WORKSPACE}/timestamp.txt ${{ inputs.lcovrc-path }} || true
        echo "Run clang-tidy"
        apt-get install -y clang-11 clang-tidy-11 libomp-dev libomp-10-dev
        update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-11 9999
        update-alternatives --install /usr/bin/clang clang /usr/bin/clang-11 9999
        update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-11 9999
        git clone https://github.com/Ericsson/codechecker.git
        apt-get install -y gcc-multilib python3-venv
        cd codechecker
        make venv || true
        . "${PWD}/venv/bin/activate"
        BUILD_UI_DIST=NO make package || true
        cd ..
        colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/1ddb69bedfd1f04c2f000e95452f7c24a4d6176b/index.yaml
        colcon mixin update default
        colcon build --mixin release compile-commands
        export PATH="${PWD}/codechecker/build/CodeChecker/bin:$PATH"
        CodeChecker analyze ${GITHUB_WORKSPACE}/build/compile_commands.json --config ${{ inputs.codechecker-config-path }} --ignore "${GITHUB_ACTION_PATH}"/codechecker-skip-list.txt --output ./reports
        CodeChecker parse -e html ./reports -o ${ARTIFACTS_DIR}/tidy-reports/$TIMESTAMP --trim-path-prefix ${GITHUB_WORKSPACE} || true
        deactivate
        echo "Run coverage.sh"
        ${GITHUB_ACTION_PATH}/scripts/coverage.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${GITHUB_WORKSPACE}/timestamp.txt ${{ inputs.lcovrc-path }} ${{ inputs.exclude }} || true
        echo "--- Measure code metrics for all packages ---"
        ${GITHUB_ACTION_PATH}/scripts/lizard_all.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${GITHUB_ACTION_PATH} ${{ inputs.CCN }} ${{ inputs.nloc }} ${{ inputs.arguments }} ${GITHUB_WORKSPACE}/timestamp.txt
        echo "--- Measure code metrics ---"
        ${GITHUB_ACTION_PATH}/scripts/lizard.sh ${GITHUB_WORKSPACE} ${ARTIFACTS_DIR} ${GITHUB_ACTION_PATH} ${{ inputs.CCN }} ${{ inputs.nloc }} ${{ inputs.arguments }} ${GITHUB_WORKSPACE}/timestamp.txt ${{ inputs.exclude }}
        echo "--- Scraping ---"
        TIMESTAMP=$(cat ${GITHUB_WORKSPACE}/timestamp.txt)
        python ${GITHUB_ACTION_PATH}/scripts/ros_metrics_reporter.py --base-dir=${GITHUB_WORKSPACE} --output-dir=${{ steps.filtered.outputs.ARTIFACTS_DIR }} --timestamp=${TIMESTAMP} --lcovrc=${{ inputs.lcovrc-path }} --exclude=${{ inputs.exclude }} || true
      shell: bash

    - name: Measure code metrics
      run: |
        echo "Measure code metrics for all packages"
        ${GITHUB_ACTION_PATH}/scripts/lizard_all.sh ${GITHUB_WORKSPACE} ${{ steps.filtered.outputs.ARTIFACTS_DIR }} ${GITHUB_ACTION_PATH} ${{ inputs.CCN }} ${{ inputs.nloc }} ${{ inputs.arguments }} ${GITHUB_WORKSPACE}/timestamp.txt
        echo "Measure code metrics"
        ${GITHUB_ACTION_PATH}/scripts/lizard.sh ${GITHUB_WORKSPACE} ${{ steps.filtered.outputs.ARTIFACTS_DIR }} ${GITHUB_ACTION_PATH} ${{ inputs.CCN }} ${{ inputs.nloc }} ${{ inputs.arguments }} ${GITHUB_WORKSPACE}/timestamp.txt ${{ inputs.exclude }}
      shell: bash

    - name: Scraping
      run: |
        TIMESTAMP=$(cat ${GITHUB_WORKSPACE}/timestamp.txt)
        mkdir -p ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/metrics/$TIMESTAMP
        python ${GITHUB_ACTION_PATH}/scripts/scraping.py --lcov_dir=${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lcov_result/$TIMESTAMP/ --lizard_dir=${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lizard_result/$TIMESTAMP/ --output_dir=${{ steps.filtered.outputs.ARTIFACTS_DIR }}/metrics/$TIMESTAMP/
      shell: bash

    - name: Create static page
      run: |
        ${GITHUB_ACTION_PATH}/scripts/create_link.sh ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lcov_result/$TIMESTAMP ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lcov_result/latest
        ${GITHUB_ACTION_PATH}/scripts/create_link.sh ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lizard_result/$TIMESTAMP ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lizard_result/latest
        ${GITHUB_ACTION_PATH}/scripts/create_link.sh ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/metrics/$TIMESTAMP ${{ steps.filtered.outputs.ARTIFACTS_DIR }}/metrics/latest
        echo "Run main.py"
        python ${GITHUB_ACTION_PATH}/scripts/main.py --input-dir=${{ steps.filtered.outputs.ARTIFACTS_DIR }}/metrics/ --hugo-root-dir=${HUGO_DIR} --hugo-template-dir=${GITHUB_ACTION_PATH}/template/hugo/ --lcov-result-path=${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lcov_result/latest/ --lizard-result-path=${{ steps.filtered.outputs.ARTIFACTS_DIR }}/lizard_result/latest/ --base-url=${{ inputs.base-url }} --title=${{ inputs.title }}
      shell: bash

    - name: Generate pages
      run: |
        cd ${{ steps.filtered.outputs.HUGO_DIR }} && hugo -d ${{ steps.filtered.outputs.OUTPUT_DIR }}
      shell: bash
